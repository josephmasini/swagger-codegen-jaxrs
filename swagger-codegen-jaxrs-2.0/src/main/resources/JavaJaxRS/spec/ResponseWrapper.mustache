package {{apiPackage}};

import javax.ws.rs.core.*;
import java.lang.annotation.Annotation;
import java.net.URI;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

{{>generatedAnnotation}}
public abstract class ResponseWrapper extends Response {

    private final Response response;

    protected ResponseWrapper(final Response response) {

        this.response = response;
    }

    @Override
    public int getStatus() {

        return response.getStatus();
    }

    @Override
    public StatusType getStatusInfo() {

        return response.getStatusInfo();
    }

    @Override
    public Object getEntity() {

        return response.getEntity();
    }

    @Override
    public <T> T readEntity(final Class<T> entityType) {

        return response.readEntity(entityType);
    }

    @Override
    public <T> T readEntity(final GenericType<T> entityType) {

        return response.readEntity(entityType);
    }

    @Override
    public <T> T readEntity(final Class<T> entityType, final Annotation[] annotations) {

        return response.readEntity(entityType, annotations);
    }

    @Override
    public <T> T readEntity(final GenericType<T> entityType, final Annotation[] annotations) {

        return response.readEntity(entityType, annotations);
    }

    @Override
    public boolean hasEntity() {

        return response.hasEntity();
    }

    @Override
    public boolean bufferEntity() {

        return response.bufferEntity();
    }

    @Override
    public void close() {

        response.close();
    }

    @Override
    public MediaType getMediaType() {

        return response.getMediaType();
    }

    @Override
    public Locale getLanguage() {

        return response.getLanguage();
    }

    @Override
    public int getLength() {

        return response.getLength();
    }

    @Override
    public Set<String> getAllowedMethods() {

        return response.getAllowedMethods();
    }

    @Override
    public Map<String, NewCookie> getCookies() {

        return response.getCookies();
    }

    @Override
    public EntityTag getEntityTag() {

        return response.getEntityTag();
    }

    @Override
    public Date getDate() {

        return response.getDate();
    }

    @Override
    public Date getLastModified() {

        return response.getLastModified();
    }

    @Override
    public URI getLocation() {

        return response.getLocation();
    }

    @Override
    public Set<Link> getLinks() {

        return response.getLinks();
    }

    @Override
    public boolean hasLink(final String relation) {

        return response.hasLink(relation);
    }

    @Override
    public Link getLink(final String relation) {

        return response.getLink(relation);
    }

    @Override
    public Link.Builder getLinkBuilder(final String relation) {

        return response.getLinkBuilder(relation);
    }

    @Override
    public MultivaluedMap<String, Object> getMetadata() {

        return response.getMetadata();
    }

    @Override
    public MultivaluedMap<String, String> getStringHeaders() {

        return response.getStringHeaders();
    }

    @Override
    public MultivaluedMap<String, Object> getHeaders() {

        return response.getHeaders();
    }

    @Override
    public String getHeaderString(final String name) {

        return response.getHeaderString(name);
    }

    @Override
    public int hashCode() {

        return response.hashCode();
    }

    @Override
    public boolean equals(final Object obj) {

        return response.equals(obj);
    }

    @Override
    public String toString() {

        return response.toString();
    }
}